<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="author" content="Jonathan Hall">
<link rel="stylesheet" href="/styles/main.css">
<link rel='stylesheet' href="https://fonts.googleapis.com/css?family=Arvo:400,700,400italic,700italic">
<script src='/scripts/utilities.js'></script>
<link rel="icon" type="image/png" href="/media/favicon192.png" sizes=192x192>
<link rel="apple-touch-icon" href="/media/favicon192.png" sizes=192x192>
<meta name="description" content="Interactive Scaled Times Tables.">
<title>Scaled Times Tables</title>
<script type="text/javascript" charset="utf-8">
            var showingGrid = true;
            var showingColours = true;
            var showingAreas = true;
            var colour1 = "#ffffff";
            var colour2 = "#ffccff";
            var base;
            var gridSize;
            var xShift;
            var theCanvas;
            var context;
            function init() {
                theCanvas = document.getElementById("tileCanvas");
                context = theCanvas.getContext("2d");
                context.canvas.width = 0.95 * window.innerWidth;
                context.canvas.height = 0.80 * window.innerHeight;
                setDimensions();
                drawScreen();
            }
            function drawScreen() {
                context.fillStyle = "#fff";
                context.fillRect(0, 0, theCanvas.width, theCanvas.height);
                drawRectangles();
                if (showingGrid) {
                    drawGrid();
                }
            }
            function drawRectangles() {
                context.strokeStyle = "black";
                context.lineWidth = 1;
                var rows = parseInt(baseSelect.value);
                var columns = parseInt(baseSelect.value);
                var maxArea = rows * columns;
                for (var i = 0; i < columns; i++) {
                    for (var j = 0; j < rows; j++) {
                        var area = (i + 1) * (j + 1);
                        context.beginPath();
                        if (showingColours) {
                            var col = ((j >= i && i % (j % 2) === 0) || (i >= j && j % (i % 2) === 0)) ? colour1 : colour2;
                            context.fillStyle = col;

                            context.fillRect(xShift + i * (i + 1) / 2 * gridSize, yShift + j * (j + 1) / 2 * gridSize, (i + 1) * gridSize, (j + 1) * gridSize);
                            context.fill();
                        }
                        if (showingAreas) {
                            var fontSize = gridSize * Math.max(0.6 * Math.min(i, j), 1);
                            context.font = "" + fontSize + "px Arial";
                            context.fillStyle = "black";
                            context.fillText(area, xShift + i * (i + 1) / 2 * gridSize + (i + 1) * gridSize / 2 - context.measureText(area).width / 2, yShift + j * (j + 1) / 2 * gridSize + (j + 1) * gridSize / 2 + fontSize / 3);
                        }
                        context.rect(xShift + i * (i + 1) / 2 * gridSize, yShift + j * (j + 1) / 2 * gridSize, (i + 1) * gridSize, (j + 1) * gridSize);
                        context.stroke();
                        context.closePath();
                    }
                }
            }
            function drawGrid() {
                context.strokeStyle = "black";
                context.lineWidth = 0.1;
                for (var i = 0; i < Math.round(context.canvas.width / gridSize); i++) {
                    context.beginPath();
                    context.moveTo(xShift % gridSize + i * gridSize, yShift % gridSize - gridSize);
                    context.lineTo(xShift % gridSize + i * gridSize, context.canvas.height);
                    context.closePath();
                    context.stroke();
                }
                for (var j = 0; j < Math.round(context.canvas.height / gridSize); j++) {
                    context.beginPath();
                    context.moveTo(0, yShift % gridSize + (j - 1) * gridSize);
                    context.lineTo(context.canvas.width, yShift % gridSize + (j - 1) * gridSize);
                    context.closePath();
                    context.stroke();
                }
            }
            function setDimensions() {
                base = parseInt(baseSelect.value);
                sizeLabel.innerHTML = "Size: " + base + " &times; " + base;
                base = base * (base + 1) / 2;
                gridSize = 0.9 * Math.min(context.canvas.width / base, context.canvas.height / base);
                xShift = context.canvas.width / 2 - base * gridSize / 2;
                yShift = 15;
            }
            function toggleGrid() {
                if (showingGrid) {
                    document.getElementById('gridButton').value = "Show Grid";
                    showingGrid = false;
                } else {
                    document.getElementById('gridButton').value = "Hide Grid";
                    showingGrid = true;
                }
                drawScreen();
            }
            function toggleColours() {
                if (showingColours) {
                    document.getElementById('colourButton').value = "Show Colours";
                    showingColours = false;
                } else {
                    document.getElementById('colourButton').value = "Hide Colours";
                    showingColours = true;
                }
                drawScreen();
            }
            function toggleAreas() {
                if (showingAreas) {
                    document.getElementById('areaButton').value = "Show Areas";
                    showingAreas = false;
                } else {
                    document.getElementById('areaButton').value = "Hide Areas";
                    showingAreas = true;
                }
                drawScreen();
            }
        </script>
<style>
            #baseSelect {
                min-width: 30%;
            }
        </style>
<script async src='/cdn-cgi/bm/cv/669835187/api.js'></script></head>
<body onload='init()'>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-44508399-1', 'auto');
  ga('send', 'pageview');

</script>
<section id="controls" class="controls border">
<h1>Scaled Times Tables</h1>
<input type='button' id='areaButton' value='Hide Areas' onclick='toggleAreas()'>
<input type='button' id='gridButton' value='Hide Grid' onclick='toggleGrid()'>
<input type='button' id='colourButton' value='Hide Colours' onclick='toggleColours()'>
<input oninput='colour1 = this.value; drawScreen();' type="color" value="#ffffff">
<input oninput='colour2 = this.value; drawScreen();' type="color" value="#ffccff">
<div>
<label id="sizeLabel" for='baseSelect'>Size:</label>
<input oninput="init()" type="range" min="1" max="30" step="1" value="5" id="baseSelect">
</div>
</section>
<section>
<div class='questionBox border'>
<canvas id="tileCanvas">
Your browser does not support HTML5 canvas.
</canvas>
</div>
</section>
<footer id="footer">
<div>
<small>
<a href="/">Home</a> |
<a href="/doNowMenu">Do Nows</a> |
<a href="/gcseMenu">GCSE Resources</a> |
<a href="/manipulativeMenu">Manipulatives</a> |
<a href="/printableMenu">Printables</a> |
<a href="/generatorMenu">Question Generators</a> |
<a href="/starterMenu">Starters</a> |
<a href="/toolMenu">Tools</a> |
<a href="/privacy">Privacy</a> |
<a href="/about">Contact</a> |
Copyright &copy;
</small>
</div>
</footer> <script type="text/javascript">(function(){window['__CF$cv$params']={r:'6828d8c98ec1e855',m:'bf7952a5a506c4a6ddc93f60f98afba70a96b990-1629601184-1800-Ad7yV4qdsJHZ5xFjbt+vgD26CY+20ep7EuS70HT0cjq+VB/E8tXkR/gG+hnI46GxqUPnfqhNrcTb+EBqmfUgtZbM20UQ5f9Cuz24wBVSWXVGWAm3EfuLqjnFRYAIYZHi0CEr7bWL5rgeok79k6UBsH0=',s:[0xb59393cadf,0x5f9911457a],}})();</script></body>
</html>
